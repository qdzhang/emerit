;;; emerit.el --- emerit make emacs run it           -*- lexical-binding: t; -*-

;; Copyright (C) 2022  qdzhang

;; Author: qdzhang <qdzhangcn@gmail.com>
;; Maintainer: qdzhang <qdzhangcn@gmail.com>
;; Created:  9 December 2022
;; URL: https://github.com/qdzhang/emerit
;; Version: 0.1
;; Keywords: processes
;; Package-Requires: ((emacs "27"))
;; SPDX-License-Identifier: GPL-3.0-or-later

;; This file is not part of GNU Emacs.

;;; License:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(defcustom emerit-shell-commands-file
  (concat user-emacs-directory ".emerit")
  "The file contains some common shell commands.")


(defun emerit--parse-shell-command (command)
  "Parse shell command."
  (let ((cmd-list (split-string command)))
    (if (equal "sudo" (car cmd-list))
        `( :sudo t
           :exec ,(car (cdr cmd-list))
           :args ,(cdr (cdr cmd-list)))
      `( :sudo nil
         :exec ,(car cmd-list)
         :args ,(cdr cmd-list)))))

(defun emerit--read-common-shell-commands-file ()
  "Read the file `emerit-shell-commands-file', and return a list of commands."
  (cl-remove-if (lambda (s) (equal "" s))
                (split-string
                 (with-temp-buffer
                   (insert-file-contents emerit-shell-commands-file)
                   (buffer-string))
                 "\n")))

(defvar emerit--shell-cands '()
  "A list contains all shell commands in `emerit-shell-commands-file'.")

(setq emerit--shell-cands
      (mapcar #'emerit--parse-shell-command (emerit--read-common-shell-commands-file)))


(defvar emerit--run-funcs-list '()
  "A alist contains all actual functions.")
(defvar emerit--run-funcs-annots '()
  "A alist contains all shell commands with annotations.")

(defun emerit--run-build-command ()
  "use `run' macro to build shell command functions."
  (dolist (cmd emerit--shell-cands)
    (let ((sudo-p (plist-get cmd :sudo))
          (program (plist-get cmd :exec))
          (args (plist-get cmd :args)))
      (eval `(emerit--run ,program ,args ,sudo-p)))))

(defun emerit--run-get-all-functions ()
  "Get all shell command functions generated by `emerit--run-build-command'."
  (dolist (cmd emerit--shell-cands)
    (let* ((program (plist-get cmd :exec))
           (args (plist-get cmd :args))
           (args-string (string-join args " "))
           (annot (concat " " program " " (if (length> args-string 30)
                                              (substring args-string 0 29)
                                            args-string)))
           (func-name (concat "emerit--run-" program)))
      (setq emerit--run-funcs-list (cons `(,program . ,func-name) emerit--run-funcs-list))
      (setq emerit--run-funcs-annots (cons `(,program . ,annot) emerit--run-funcs-annots)))))

(defun emerit--run-annots-fn (candidate)
  "How to annotate completing-read CANDIDATE."
  (cdr (assoc candidate emerit--run-funcs-annots)))


(defmacro emerit--run (exec args sudo-p)
  "Return a named function that runs EXEC with ARGS.
If SUDO-P is t, call the function in `/sudo::/' tramp."
  `(defun ,(intern (concat "emerit--run-" exec)) ()
     ,(format "Run the %s exec with args %s." exec args)
     (interactive)
     (when ,sudo-p
       (cd "/sudo::/"))
     (make-process :name (concat "run-" ,exec)
                   :buffer (concat "*run-" ,exec "-buffer*")
                   :command (cons ,exec ',args))))

;;;###autoload
(defun emerit-run-select-command ()
  "Select the shell command functions generated by `emerit--run-build-command'."
  (interactive)
  (emerit--run-build-command)
  (emerit--run-get-all-functions)
  (let ((completion-extra-properties '(:annotation-function emerit--run-annots-fn))
        (selected-func-name))
    (setq selected-func-name (completing-read "Run commands: " emerit--run-funcs-annots))
    (funcall (intern (cdr (assoc selected-func-name emerit--run-funcs-list))))))


(provide 'emerit)
;;; emerit.el ends here
